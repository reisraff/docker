#!/usr/bin/env python3

import sys
import os
import re
import subprocess


def get_ports_from_container(file_name, container):
    file = open(file_name, 'r')
    iterator = list(file.readlines())
    spaces = 0
    from_line = 0

    for _, line in enumerate(iterator):
        if ' {}:'.format(container) in line:
            spaces = line.count(' ')
            from_line = _
            break

    ports = []
    p = False

    for _, line in enumerate(iterator):
        if _ < from_line:
            continue

        if _ > from_line and line.count(' ') < spaces + 1:
            break

        if 'ports:' in line:
            spaces = line.count(' ')
            p = True
            continue

        if p:
            ports.append(line)

    real_ports = []

    for port in ports:
        result = re.findall('[0-9.:]+', port)
        real_ports.append(result[0])

    return real_ports


help_message = """
RUN-CONTAINER

Usage:
    {} [container-name]
"""

if 2 != len(sys.argv):
    sys.stderr.write(help_message.format(sys.argv[0]))
    sys.stderr.flush()
    sys.exit(1)

container_name = sys.argv[1]
cwd = os.path.realpath(os.getcwd())
docker_compose_bin_folder = os.path.dirname(os.path.realpath(__file__))
root_folder = os.path.dirname(docker_compose_bin_folder)
docker_compose_file = os.path.join(root_folder, 'docker-compose.yml')
env_file = os.path.join(root_folder, '.env')

user = 'root'
if os.path.isfile(env_file):
    env_content = open(env_file, 'r').read().encode('utf8')
    user_result = re.findall('USER=(.*)', env_content.decode())
    user = user_result[0] if len(user_result) else user

try:
    get_image_name = f"grep {container_name} -A5 {docker_compose_file} | grep image | sed -re 's/image:(.*)/\\1/'"
    output = subprocess.check_output(get_image_name, shell=True).strip().decode()

    get_id = "docker ps | grep '{}'".format(output)
    output = subprocess.check_output(get_id, shell=True).strip()
except Exception:
    output = b""
container_id = re.findall('^[a-z0-9]+', output.decode())

if len(container_id):
    command = 'docker exec -it {} bash'.format(container_id[0])
    os.system(command)
    exit(0)

ports = get_ports_from_container(docker_compose_file, container_name)

ports_string = ''
for port in ports:
    ports_string = ports_string + ' -p {}'.format(port)

command = f"""
xhost +SI:localuser:root && \\
xhost +SI:localuser:{user} \\
&& docker-compose \\
-f {docker_compose_file} \\
run \\
--rm \\
-e DISPLAY={os.environ['DISPLAY']} \\
-v /tmp/.X11-unix:/tmp/.X11-unix \\
-v /opt:/opt \\
-v {cwd}:/home/{user}/workdir \\
-w /home/{user} \\
-u {user} \\
{ports_string} \\
{container_name} \\
bash"""

os.system(command)
